import requests, json, pymongo, math, gmplot, argparse
from processing_utils import trail_weight

parser = argparse.ArgumentParser(description = 'Computes the weights of a trail generated by our algorighm and of a baseline trail provided by OpenRouteService')
parser.add_argument('fname', metavar='file', help='text file that include coordinates of a trail')
args = parser.parse_args()

fname = args.fname

with open('keys.json', 'r') as f:
    keys = json.load(f)
    f.close()

try:
    with open(fname, 'r') as f:
        text_coordinates = f.readlines()[0]
        f.close()
    # exp_coordinates are the coordinates our algorithm output and
    # we are using to find the reults of our expriment
    exp_coordinates = json.loads(text_coordinates)
except:
    print "Error with opening file"
    quit()

# database url
db_url = keys['db_url']
# OpenRouteService api key
api_key = keys['ors_api']

# connect to mongodb client
client = pymongo.MongoClient(db_url)
# connect to database
db = client.test
# geocaches collection
geocaches = db.geocaches
# utagawa collection
utagawa = db.utagawa

print "building ORS query"
# find start, end locations
[start_lon, start_lat] = exp_coordinates[0]
[end_lon, end_lat] = exp_coordinates[-1]
start_end = str(start_lon) + '%2C' + str(start_lat) + '%7C' + str(end_lon) + '%2C' + str(end_lat)
# what kind of route we're looking for
profile = 'foot-hiking' # 'cycling-road', 'cycling-mountain'
# querying for the recommended trail
preference = 'recommended'
# output format
geo_format = 'geojson'
# request url
url = 'https://api.openrouteservice.org/directions?api_key='+ api_key + '&coordinates=' + start_end + '&profile=' + profile + '&preference=' + preference + '&units=m&language=en&geometry=true&geometry_format=' + geo_format + '&geometry_simplify=&instructions=true&instructions_format=text&roundabout_exits=&attributes=&maneuvers=&radiuses=&bearings=&continue_straight=&elevation=&extra_info=steepness&optimized=true&options=%7B%7D&id='

print "requesting route"
response = requests.get(url)
ors = response.json()

print
print "STARTING LOCATION:",(start_lat,start_lon)
print "ENDING LOCATION:",(end_lat,end_lon)
print

try:
    baseline_coordinates = ors['routes'][0]['geometry']['coordinates']
    ors_success = True
except:
    print "ORS ERROR:", ors['error']['message']

    ors_success = False

if ors_success:
    print "BASELINE ROUTE "
    trail_weight(baseline_coordinates, geocaches, utagawa)

print
print "EXPERIMENT ROUTE"
trail_weight(exp_coordinates, geocaches, utagawa)
